# SalixGameStudio/CMakeLists.txt (root)
cmake_minimum_required(VERSION 3.15)
project(SalixGameStudio VERSION 0.1 LANGUAGES CXX C)
enable_testing()
set(CMAKE_CXX_STANDARD 17)
set(CMAKE_CXX_STANDARD_REQUIRED ON)
set(CMAKE_CXX_EXTENSIONS OFF)


if(MSVC)
    # Set only the general flags that apply to ALL build types
    add_compile_options(/EHsc /W4 /wd4251)
endif()



set(CORE_ENGINE_BUILD_DIR "${CMAKE_BINARY_DIR}")
set(CMAKE_RUNTIME_OUTPUT_DIRECTORY "${CORE_ENGINE_BUILD_DIR}")
set(CMAKE_LIBRARY_OUTPUT_DIRECTORY "${CORE_ENGINE_BUILD_DIR}")
set(CMAKE_ARCHIVE_OUTPUT_DIRECTORY "${CORE_ENGINE_BUILD_DIR}")

find_package(OpenGL REQUIRED)

# --- Vendor Library Paths ---
set(SDL2_INCLUDE_DIR "${CMAKE_SOURCE_DIR}/vendor/SDL2/include")
set(SDL2_LIB_DIR "${CMAKE_SOURCE_DIR}/vendor/SDL2/lib/x64")
set(SDL2_IMAGE_INCLUDE_DIR "${CMAKE_SOURCE_DIR}/vendor/SDL2_image/include")
set(SDL2_IMAGE_LIB_DIR "${CMAKE_SOURCE_DIR}/vendor/SDL2_image/lib/x64")
set(SDL2_TTF_INCLUDE_DIR "${CMAKE_SOURCE_DIR}/vendor/SDL2_ttf/include")
set(SDL2_TTF_LIB_DIR "${CMAKE_SOURCE_DIR}/vendor/SDL2_ttf/lib/x64")

# --- Create IMPORTED Library Targets ---
add_library(SDL2_LIB STATIC IMPORTED)
set_target_properties(SDL2_LIB PROPERTIES IMPORTED_LOCATION "${SDL2_LIB_DIR}/SDL2.lib" INTERFACE_INCLUDE_DIRECTORIES "${SDL2_INCLUDE_DIR}")
add_library(SDL2MAIN_LIB STATIC IMPORTED)
set_target_properties(SDL2MAIN_LIB PROPERTIES IMPORTED_LOCATION "${SDL2_LIB_DIR}/SDL2main.lib" INTERFACE_INCLUDE_DIRECTORIES "${SDL2_INCLUDE_DIR}")
add_library(SDL2_IMAGE_LIB STATIC IMPORTED)
set_target_properties(SDL2_IMAGE_LIB PROPERTIES IMPORTED_LOCATION "${SDL2_IMAGE_LIB_DIR}/SDL2_image.lib" INTERFACE_INCLUDE_DIRECTORIES "${SDL2_IMAGE_INCLUDE_DIR}")
add_library(SDL2_TTF_LIB STATIC IMPORTED)
set_target_properties(SDL2_TTF_LIB PROPERTIES IMPORTED_LOCATION "${SDL2_TTF_LIB_DIR}/SDL2_ttf.lib" INTERFACE_INCLUDE_DIRECTORIES "${SDL2_TTF_INCLUDE_DIR}")

# --- Create INTERFACE Library for DocTest Testing framework.
# --- doctest Integration (Single Header for Offline Use) ---
add_library(doctest INTERFACE)
target_include_directories(doctest INTERFACE
    "${CMAKE_SOURCE_DIR}/vendor/doctest/doctest"
)
# --- Create INTERFACE Library for GLM (Header-Only) ---
add_library(glm INTERFACE)
target_include_directories(glm INTERFACE "${CMAKE_SOURCE_DIR}/vendor/glm")

# --- Create INTERFACE Library for Cereal (Header-Only) ---
add_library(cereal INTERFACE)
target_include_directories(cereal INTERFACE "${CMAKE_SOURCE_DIR}/vendor/cereal/include")

# --- Create STATIC Library for GLAD ---
add_library(glad STATIC "${CMAKE_SOURCE_DIR}/vendor/glad/src/glad.c")
target_include_directories(glad PUBLIC "${CMAKE_SOURCE_DIR}/vendor/glad/include")
target_link_libraries(glad PUBLIC OpenGL::GL)

# --- Create STATIC Library for ImGui ---
add_library(ImGui STATIC
    "${CMAKE_SOURCE_DIR}/vendor/imgui/imgui.cpp"
    "${CMAKE_SOURCE_DIR}/vendor/imgui/imgui_draw.cpp"
    "${CMAKE_SOURCE_DIR}/vendor/imgui/imgui_widgets.cpp"
    "${CMAKE_SOURCE_DIR}/vendor/imgui/imgui_demo.cpp"
    "${CMAKE_SOURCE_DIR}/vendor/imgui/imgui_tables.cpp"
    "${CMAKE_SOURCE_DIR}/vendor/imgui/backends/imgui_impl_sdl2.cpp"
    "${CMAKE_SOURCE_DIR}/vendor/imgui/backends/imgui_impl_sdlrenderer2.cpp"
    "${CMAKE_SOURCE_DIR}/vendor/imgui/backends/imgui_impl_opengl3.cpp"
    "${CMAKE_SOURCE_DIR}/vendor/ImGuiFileDialog/ImGuiFileDialog.cpp"
    "${CMAKE_SOURCE_DIR}/vendor/ImGuizmo/ImGuizmo.cpp"
)
target_include_directories(ImGui PUBLIC
    "${CMAKE_SOURCE_DIR}/vendor/imgui"
    "${CMAKE_SOURCE_DIR}/vendor/imgui/backends"
    "${CMAKE_SOURCE_DIR}/vendor/ImGuiFileDialog"
    "${CMAKE_SOURCE_DIR}/vendor/ImGuizmo"
)
target_link_libraries(ImGui PRIVATE SDL2_LIB glad)

# --- Add yaml-cpp from the vendor directory ---
set(YAML_CPP_BUILD_TOOLS OFF) # <-- This disables the sandbox/parse/read executables
add_subdirectory(vendor/yaml-cpp)
if(MSVC)
  target_compile_options(yaml-cpp PRIVATE /W3)
endif()

# --- Add top-level source directories ---
add_subdirectory(src/Salix)
add_subdirectory(src/Game)
add_subdirectory(src/Editor)
add_subdirectory(src/Launcher)
add_subdirectory(src/Tests)

# --- INSTALL RULES ---
# SDL2.dll
install(FILES "${SDL2_LIB_DIR}/SDL2.dll" "${SDL2_IMAGE_LIB_DIR}/SDL2_image.dll" "${SDL2_TTF_LIB_DIR}/SDL2_ttf.dll"
    DESTINATION "${CORE_ENGINE_BUILD_DIR}/Release" CONFIGURATIONS Release)

install(FILES "${SDL2_LIB_DIR}/SDL2.dll" "${SDL2_IMAGE_LIB_DIR}/SDL2_image.dll" "${SDL2_TTF_LIB_DIR}/SDL2_ttf.dll"
    DESTINATION "${CORE_ENGINE_BUILD_DIR}/Debug" CONFIGURATIONS Debug)

# Assets/Fonts
install(DIRECTORY "${CMAKE_SOURCE_DIR}/Assets/Fonts/"
    DESTINATION "${CORE_ENGINE_BUILD_DIR}/Debug/Assets/Fonts" CONFIGURATIONS Debug)

install(DIRECTORY "${CMAKE_SOURCE_DIR}/Assets/Fonts/"
    DESTINATION "${CORE_ENGINE_BUILD_DIR}/Release/Assets/Fonts" CONFIGURATIONS Release)

# Assets/Shaders
install(DIRECTORY "${CMAKE_SOURCE_DIR}/Assets/Shaders/"
    DESTINATION "${CORE_ENGINE_BUILD_DIR}/Debug/Assets" CONFIGURATIONS Debug)

install(DIRECTORY "${CMAKE_SOURCE_DIR}/Assets/Shaders/"
    DESTINATION "${CORE_ENGINE_BUILD_DIR}/Release/Assets" CONFIGURATIONS Release)


# --- Define compile-time feature flags ---
add_definitions(-DSALIX_GUI_IMGUI -DSALIX_BACKEND_SDL -DSALIX_IMAGE_SDL)